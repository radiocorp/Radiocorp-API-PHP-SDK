<?php
/**
 * Message
 *
 * PHP version 5
 *
 * @category Class
 * @package  RadioCorp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Public RadioCorp API
 *
 * Public/Private API for accessing RadioCorp recources through custom applications.\\ At the moment only available for the stations 100% NL, SLAM! and SLAM!TV ### Available formats ### Available formats (based on the 'Accept' header):\\ json, array, csv, html, jsonp, php, serialized, xml\\ The API defaults to application/json when no header supplied. ### Contact / License ###
 *
 * OpenAPI spec version: v0.0
 * Contact: beheer@radiocorp.nl
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RadioCorp\Model;

use \ArrayAccess;
use \RadioCorp\ObjectSerializer;

/**
 * Message Class Doc Comment
 *
 * @category Class
 * @package  RadioCorp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Message implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Message';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'message_id' => 'int',
        'message_hash' => 'string',
        'message_type' => 'string',
        'parent_id' => 'int',
        'reply_allowed' => 'bool',
        'to_visual' => 'bool',
        'contact' => '\RadioCorp\Model\MessageContact',
        'message' => 'string',
        'message_empty' => 'bool',
        'attachment' => '\RadioCorp\Model\MessageAttachment',
        'received' => '\RadioCorp\Model\MessageReceived'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'message_id' => 'int32',
        'message_hash' => null,
        'message_type' => null,
        'parent_id' => 'int32',
        'reply_allowed' => null,
        'to_visual' => null,
        'contact' => null,
        'message' => null,
        'message_empty' => null,
        'attachment' => null,
        'received' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'message_id' => 'message_id',
        'message_hash' => 'message_hash',
        'message_type' => 'message_type',
        'parent_id' => 'parent_id',
        'reply_allowed' => 'reply_allowed',
        'to_visual' => 'to_visual',
        'contact' => 'contact',
        'message' => 'message',
        'message_empty' => 'message_empty',
        'attachment' => 'attachment',
        'received' => 'received'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'message_id' => 'setMessageId',
        'message_hash' => 'setMessageHash',
        'message_type' => 'setMessageType',
        'parent_id' => 'setParentId',
        'reply_allowed' => 'setReplyAllowed',
        'to_visual' => 'setToVisual',
        'contact' => 'setContact',
        'message' => 'setMessage',
        'message_empty' => 'setMessageEmpty',
        'attachment' => 'setAttachment',
        'received' => 'setReceived'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'message_id' => 'getMessageId',
        'message_hash' => 'getMessageHash',
        'message_type' => 'getMessageType',
        'parent_id' => 'getParentId',
        'reply_allowed' => 'getReplyAllowed',
        'to_visual' => 'getToVisual',
        'contact' => 'getContact',
        'message' => 'getMessage',
        'message_empty' => 'getMessageEmpty',
        'attachment' => 'getAttachment',
        'received' => 'getReceived'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['message_id'] = isset($data['message_id']) ? $data['message_id'] : null;
        $this->container['message_hash'] = isset($data['message_hash']) ? $data['message_hash'] : null;
        $this->container['message_type'] = isset($data['message_type']) ? $data['message_type'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['reply_allowed'] = isset($data['reply_allowed']) ? $data['reply_allowed'] : null;
        $this->container['to_visual'] = isset($data['to_visual']) ? $data['to_visual'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['message_empty'] = isset($data['message_empty']) ? $data['message_empty'] : null;
        $this->container['attachment'] = isset($data['attachment']) ? $data['attachment'] : null;
        $this->container['received'] = isset($data['received']) ? $data['received'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets message_id
     *
     * @return int|null
     */
    public function getMessageId()
    {
        return $this->container['message_id'];
    }

    /**
     * Sets message_id
     *
     * @param int|null $message_id message_id
     *
     * @return $this
     */
    public function setMessageId($message_id)
    {
        $this->container['message_id'] = $message_id;

        return $this;
    }

    /**
     * Gets message_hash
     *
     * @return string|null
     */
    public function getMessageHash()
    {
        return $this->container['message_hash'];
    }

    /**
     * Sets message_hash
     *
     * @param string|null $message_hash message_hash
     *
     * @return $this
     */
    public function setMessageHash($message_hash)
    {
        $this->container['message_hash'] = $message_hash;

        return $this;
    }

    /**
     * Gets message_type
     *
     * @return string|null
     */
    public function getMessageType()
    {
        return $this->container['message_type'];
    }

    /**
     * Sets message_type
     *
     * @param string|null $message_type message_type
     *
     * @return $this
     */
    public function setMessageType($message_type)
    {
        $this->container['message_type'] = $message_type;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int|null
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int|null $parent_id parent_id
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets reply_allowed
     *
     * @return bool|null
     */
    public function getReplyAllowed()
    {
        return $this->container['reply_allowed'];
    }

    /**
     * Sets reply_allowed
     *
     * @param bool|null $reply_allowed reply_allowed
     *
     * @return $this
     */
    public function setReplyAllowed($reply_allowed)
    {
        $this->container['reply_allowed'] = $reply_allowed;

        return $this;
    }

    /**
     * Gets to_visual
     *
     * @return bool|null
     */
    public function getToVisual()
    {
        return $this->container['to_visual'];
    }

    /**
     * Sets to_visual
     *
     * @param bool|null $to_visual to_visual
     *
     * @return $this
     */
    public function setToVisual($to_visual)
    {
        $this->container['to_visual'] = $to_visual;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \RadioCorp\Model\MessageContact|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \RadioCorp\Model\MessageContact|null $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets message_empty
     *
     * @return bool|null
     */
    public function getMessageEmpty()
    {
        return $this->container['message_empty'];
    }

    /**
     * Sets message_empty
     *
     * @param bool|null $message_empty message_empty
     *
     * @return $this
     */
    public function setMessageEmpty($message_empty)
    {
        $this->container['message_empty'] = $message_empty;

        return $this;
    }

    /**
     * Gets attachment
     *
     * @return \RadioCorp\Model\MessageAttachment|null
     */
    public function getAttachment()
    {
        return $this->container['attachment'];
    }

    /**
     * Sets attachment
     *
     * @param \RadioCorp\Model\MessageAttachment|null $attachment attachment
     *
     * @return $this
     */
    public function setAttachment($attachment)
    {
        $this->container['attachment'] = $attachment;

        return $this;
    }

    /**
     * Gets received
     *
     * @return \RadioCorp\Model\MessageReceived|null
     */
    public function getReceived()
    {
        return $this->container['received'];
    }

    /**
     * Sets received
     *
     * @param \RadioCorp\Model\MessageReceived|null $received received
     *
     * @return $this
     */
    public function setReceived($received)
    {
        $this->container['received'] = $received;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


